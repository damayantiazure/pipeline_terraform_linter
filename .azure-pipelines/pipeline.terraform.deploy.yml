trigger:
  branches:
    include:
      - main
  paths:
    include:
      - iac/terraform

pool:
  vmImage: ubuntu-latest

variables:
  - group: openhack
  - group: keyvault # option 1: Variable Group linked to KV
  - group: tfstate
  - name: ServiceConnectionName
    value: AzureServiceConnection
  - name: workDir
    value: "$(System.DefaultWorkingDirectory)/iac/terraform"

stages:
  - stage: Preview
    jobs:
      - job: Preview
        displayName: Preview Changes
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: "latest"

          - task: TerraformCLI@0
            displayName: Run Terraform Init
            inputs:
              command: "init"
              workingDirectory: "$(workDir)"
              backendType: "azurerm"
              backendServiceArm: "$(ServiceConnectionName)"
              backendAzureRmResourceGroupName: "$(TFSTATE_RESOURCES_GROUP_NAME)"
              backendAzureRmStorageAccountName: "$(TFSTATE_STORAGE_ACCOUNT_NAME)"
              backendAzureRmContainerName: "$(TFSTATE_STORAGE_CONTAINER_NAME)"
              backendAzureRmKey: "$(TFSTATE_KEY)"
              allowTelemetryCollection: true

          # option 2: Query KV
          # - task: AzureKeyVault@2
          #   inputs:
          #     azureSubscription: "$(ServiceConnectionName)"
          #     KeyVaultName: "$(RESOURCES_PREFIX)kv"
          #     SecretsFilter: "SQL-PASSWORD"
          #     RunAsPreJob: true

          - task: TerraformCLI@0
            displayName: Run Terraform Plan
            inputs:
              command: "plan"
              workingDirectory: "$(workDir)"
              environmentServiceName: "$(ServiceConnectionName)"
              commandOptions: '-detailed-exitcode -var="location=$(LOCATION)" -var="resources_prefix=$(RESOURCES_PREFIX)" -var="mssql_server_administrator_login_password=$(SQL-PASSWORD)'
              publishPlanResults: "tfplan"
              allowTelemetryCollection: true

          - script: |
              echo "##vso[task.setvariable variable=TERRAFORM_PLAN_HAS_CHANGES;isOutput=true]$TERRAFORM_PLAN_HAS_CHANGES"
              echo "##vso[task.setvariable variable=TERRAFORM_PLAN_HAS_DESTROY_CHANGES;isOutput=true]$TERRAFORM_PLAN_HAS_DESTROY_CHANGES"
            name: "PlanStatus"
            displayName: "Set Variables with Terraform Plan Exit Codes for next stage"

  - stage: Deploy
    dependsOn: Preview
    condition: and(succeeded(), eq(dependencies.Preview.outputs['Preview.PlanStatus.TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
    jobs:
      - deployment: Deploy
        displayName: Deployment
        environment: production
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@0
                  displayName: Install Terraform
                  inputs:
                    terraformVersion: "latest"

                - task: TerraformCLI@0
                  displayName: Terraform Init
                  inputs:
                    command: "init"
                    workingDirectory: "$(workDir)"
                    backendType: "azurerm"
                    backendServiceArm: "$(ServiceConnectionName)"
                    backendAzureRmResourceGroupName: "$(TFSTATE_RESOURCES_GROUP_NAME)"
                    backendAzureRmStorageAccountName: "$(TFSTATE_STORAGE_ACCOUNT_NAME)"
                    backendAzureRmContainerName: "$(TFSTATE_STORAGE_CONTAINER_NAME)"
                    backendAzureRmKey: "$(TFSTATE_KEY)"
                    allowTelemetryCollection: true

                # option 2: Query KV
                # - task: AzureKeyVault@2
                #   inputs:
                #     azureSubscription: "$(ServiceConnectionName)"
                #     KeyVaultName: "$(RESOURCES_PREFIX)kv"
                #     SecretsFilter: "SQL-PASSWORD"
                #     RunAsPreJob: true

                - task: TerraformCLI@0
                  displayName: Terraform Apply
                  inputs:
                    command: "apply"
                    workingDirectory: "$(workDir)"
                    environmentServiceName: "$(ServiceConnectionName)"
                    runAzLogin: true
                    commandOptions: '-var="location=$(LOCATION)" -var="resources_prefix=$(RESOURCES_PREFIX)" -var="mssql_server_administrator_login_password=$(SQL-PASSWORD)'
                    allowTelemetryCollection: true
